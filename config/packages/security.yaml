# config/packages/security.yaml
security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    role_hierarchy:
        ROLE_ADMIN:       ROLE_USER
        ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            form_login:
                login_path: app_login
                check_path: app_login
                enable_csrf: true
            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true
        secured_area:
            # ...
            form_login:
                # ...
                enable_csrf: true
    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
        # require ROLE_ADMIN for /admin*
        #- { path: '^/admin', roles: ROLE_ADMIN }

        # or require ROLE_ADMIN or IS_AUTHENTICATED_FULLY for /admin*
        #- { path: '^/admin', roles: [IS_AUTHENTICATED_FULLY, ROLE_ADMIN] }

        # the 'path' value can be any valid regular expression
        # (this one will match URLs like /api/post/7298 and /api/comment/528491)
        #- { path: ^/api/(post|comment)/\d+$, roles: ROLE_USER }
        # require ROLE_ADMIN for /admin*
        - { path: '^/home', roles: ROLE_ADMIN }
        # require ROLE_ADMIN for /admin*
        - { path: '^/login', roles: null }
        # require ROLE_ADMIN for /admin*
        - { path: '^/logout', roles: null }
        # require ROLE_ADMIN for /admin*
        - { path: '^/register', roles: null }
        # require ROLE_ADMIN for /admin*
        - { path: '^/verify/email', roles: null }
        # require ROLE_ADMIN for /admin*
        - { path: '^/client', roles: ROLE_ADMIN }
        # require ROLE_ADMIN for /admin*
        - { path: '^/user', roles: ROLE_ADMIN }
        # require ROLE_ADMIN for /admin*
        - { path: '^/classificationofactivities', roles: ROLE_ADMIN }
        # require ROLE_ADMIN for /admin*
        - { path: '^/service', roles: ROLE_ADMIN }
        # require ROLE_ADMIN for /admin*
        - { path: '^/employe', roles: ROLE_ADMIN }
        